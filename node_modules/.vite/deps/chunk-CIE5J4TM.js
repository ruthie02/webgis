import {
  Object_default,
  abstract,
  init_Object,
  init_util
} from "./chunk-LY63RGQB.js";
import {
  clamp,
  init_math
} from "./chunk-NYBLFW4I.js";
import {
  assert,
  init_asserts
} from "./chunk-3PBYOB6B.js";
import {
  __esm
} from "./chunk-J43GMYXM.js";

// node_modules/ol/layer/Property.js
var Property_default;
var init_Property = __esm({
  "node_modules/ol/layer/Property.js"() {
    Property_default = {
      OPACITY: "opacity",
      VISIBLE: "visible",
      EXTENT: "extent",
      Z_INDEX: "zIndex",
      MAX_RESOLUTION: "maxResolution",
      MIN_RESOLUTION: "minResolution",
      MAX_ZOOM: "maxZoom",
      MIN_ZOOM: "minZoom",
      SOURCE: "source",
      MAP: "map"
    };
  }
});

// node_modules/ol/layer/Base.js
var BaseLayer, Base_default;
var init_Base = __esm({
  "node_modules/ol/layer/Base.js"() {
    init_Object();
    init_Property();
    init_util();
    init_asserts();
    init_math();
    BaseLayer = class extends Object_default {
      constructor(options) {
        super();
        this.on;
        this.once;
        this.un;
        this.background_ = options.background;
        const properties = Object.assign({}, options);
        if (typeof options.properties === "object") {
          delete properties.properties;
          Object.assign(properties, options.properties);
        }
        properties[Property_default.OPACITY] = options.opacity !== void 0 ? options.opacity : 1;
        assert(typeof properties[Property_default.OPACITY] === "number", 64);
        properties[Property_default.VISIBLE] = options.visible !== void 0 ? options.visible : true;
        properties[Property_default.Z_INDEX] = options.zIndex;
        properties[Property_default.MAX_RESOLUTION] = options.maxResolution !== void 0 ? options.maxResolution : Infinity;
        properties[Property_default.MIN_RESOLUTION] = options.minResolution !== void 0 ? options.minResolution : 0;
        properties[Property_default.MIN_ZOOM] = options.minZoom !== void 0 ? options.minZoom : -Infinity;
        properties[Property_default.MAX_ZOOM] = options.maxZoom !== void 0 ? options.maxZoom : Infinity;
        this.className_ = properties.className !== void 0 ? properties.className : "ol-layer";
        delete properties.className;
        this.setProperties(properties);
        this.state_ = null;
      }
      getBackground() {
        return this.background_;
      }
      getClassName() {
        return this.className_;
      }
      getLayerState(managed) {
        const state = this.state_ || {
          layer: this,
          managed: managed === void 0 ? true : managed
        };
        const zIndex = this.getZIndex();
        state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
        state.visible = this.getVisible();
        state.extent = this.getExtent();
        state.zIndex = zIndex === void 0 && !state.managed ? Infinity : zIndex;
        state.maxResolution = this.getMaxResolution();
        state.minResolution = Math.max(this.getMinResolution(), 0);
        state.minZoom = this.getMinZoom();
        state.maxZoom = this.getMaxZoom();
        this.state_ = state;
        return state;
      }
      getLayersArray(array) {
        return abstract();
      }
      getLayerStatesArray(states) {
        return abstract();
      }
      getExtent() {
        return this.get(Property_default.EXTENT);
      }
      getMaxResolution() {
        return this.get(Property_default.MAX_RESOLUTION);
      }
      getMinResolution() {
        return this.get(Property_default.MIN_RESOLUTION);
      }
      getMinZoom() {
        return this.get(Property_default.MIN_ZOOM);
      }
      getMaxZoom() {
        return this.get(Property_default.MAX_ZOOM);
      }
      getOpacity() {
        return this.get(Property_default.OPACITY);
      }
      getSourceState() {
        return abstract();
      }
      getVisible() {
        return this.get(Property_default.VISIBLE);
      }
      getZIndex() {
        return this.get(Property_default.Z_INDEX);
      }
      setBackground(background) {
        this.background_ = background;
        this.changed();
      }
      setExtent(extent) {
        this.set(Property_default.EXTENT, extent);
      }
      setMaxResolution(maxResolution) {
        this.set(Property_default.MAX_RESOLUTION, maxResolution);
      }
      setMinResolution(minResolution) {
        this.set(Property_default.MIN_RESOLUTION, minResolution);
      }
      setMaxZoom(maxZoom) {
        this.set(Property_default.MAX_ZOOM, maxZoom);
      }
      setMinZoom(minZoom) {
        this.set(Property_default.MIN_ZOOM, minZoom);
      }
      setOpacity(opacity) {
        assert(typeof opacity === "number", 64);
        this.set(Property_default.OPACITY, opacity);
      }
      setVisible(visible) {
        this.set(Property_default.VISIBLE, visible);
      }
      setZIndex(zindex) {
        this.set(Property_default.Z_INDEX, zindex);
      }
      disposeInternal() {
        if (this.state_) {
          this.state_.layer = null;
          this.state_ = null;
        }
        super.disposeInternal();
      }
    };
    Base_default = BaseLayer;
  }
});

export {
  Property_default,
  init_Property,
  Base_default,
  init_Base
};
//# sourceMappingURL=chunk-CIE5J4TM.js.map
