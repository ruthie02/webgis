{
  "version": 3,
  "sources": ["../../ol/control/Control.js"],
  "sourcesContent": ["/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport {VOID} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {removeNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_\n        ? this.target_\n        : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this)\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,IA6CM,SAmHC;AAhKP;AAAA;AAGA;AACA;AACA;AACA;AACA;AAsCA,IAAM,UAAN,cAAsB,eAAW;AAAA,MAI/B,YAAY,SAAS;AACnB,cAAM;AAEN,cAAM,UAAU,QAAQ;AACxB,YAAI,WAAW,CAAC,QAAQ,UAAU,CAAC,QAAQ,MAAM,eAAe;AAC9D,kBAAQ,MAAM,gBAAgB;AAAA,QAChC;AAMA,aAAK,UAAU,UAAU,UAAU;AAMnC,aAAK,UAAU;AAMf,aAAK,OAAO;AAMZ,aAAK,eAAe,CAAC;AAErB,YAAI,QAAQ,QAAQ;AAClB,eAAK,SAAS,QAAQ;AAAA,QACxB;AAEA,YAAI,QAAQ,QAAQ;AAClB,eAAK,UAAU,QAAQ,MAAM;AAAA,QAC/B;AAAA,MACF;AAAA,MAKA,kBAAkB;AAChB,mBAAW,KAAK,OAAO;AACvB,cAAM,gBAAgB;AAAA,MACxB;AAAA,MAOA,SAAS;AACP,eAAO,KAAK;AAAA,MACd;AAAA,MAUA,OAAO,KAAK;AACV,YAAI,KAAK,MAAM;AACb,qBAAW,KAAK,OAAO;AAAA,QACzB;AACA,iBAAS,IAAI,GAAG,KAAK,KAAK,aAAa,QAAQ,IAAI,IAAI,EAAE,GAAG;AAC1D,wBAAc,KAAK,aAAa,EAAE;AAAA,QACpC;AACA,aAAK,aAAa,SAAS;AAC3B,aAAK,OAAO;AACZ,YAAI,KAAK;AACP,gBAAM,SAAS,KAAK,UAChB,KAAK,UACL,IAAI,6BAA6B;AACrC,iBAAO,YAAY,KAAK,OAAO;AAC/B,cAAI,KAAK,WAAW,MAAM;AACxB,iBAAK,aAAa;AAAA,cAChB,OAAO,KAAK,qBAAa,YAAY,KAAK,QAAQ,IAAI;AAAA,YACxD;AAAA,UACF;AACA,cAAI,OAAO;AAAA,QACb;AAAA,MACF;AAAA,MAOA,OAAO,UAAU;AAAA,MAAC;AAAA,MAWlB,UAAU,QAAQ;AAChB,aAAK,UACH,OAAO,WAAW,WAAW,SAAS,eAAe,MAAM,IAAI;AAAA,MACnE;AAAA,IACF;AAEA,IAAO,kBAAQ;AAAA;AAAA;",
  "names": []
}
