{
  "version": 3,
  "sources": ["../../ol-layerswitcher/dist/ol-layerswitcher.js", "dep:ol-layerswitcher"],
  "sourcesContent": ["(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ol/control/Control'), require('ol/Observable'), require('ol/layer/Group')) :\r\n\ttypeof define === 'function' && define.amd ? define(['ol/control/Control', 'ol/Observable', 'ol/layer/Group'], factory) :\r\n\t(global.LayerSwitcher = factory(global.ol.control.Control,global.ol.Observable,global.ol.layer.Group));\r\n}(this, (function (Control,ol_Observable,LayerGroup) { 'use strict';\r\n\r\nControl = 'default' in Control ? Control['default'] : Control;\r\nLayerGroup = 'default' in LayerGroup ? LayerGroup['default'] : LayerGroup;\r\n\r\n/**\r\n * @protected\r\n */\r\nconst CSS_PREFIX = 'layer-switcher-';\r\n/**\r\n * OpenLayers LayerSwitcher Control, displays a list of layers and groups\r\n * associated with a map which have a `title` property.\r\n *\r\n * To be shown in the LayerSwitcher panel layers must have a `title` property;\r\n * base map layers should have a `type` property set to `base`. Group layers\r\n * (`LayerGroup`) can be used to visually group layers together; a group\r\n * with a `fold` property set to either `'open'` or `'close'` will be displayed\r\n * with a toggle.\r\n *\r\n * See [BaseLayerOptions](#baselayeroptions) for a full list of LayerSwitcher\r\n * properties for layers (`TileLayer`, `ImageLayer`, `VectorTile` etc.) and\r\n * [GroupLayerOptions](#grouplayeroptions) for group layer (`LayerGroup`)\r\n * LayerSwitcher properties.\r\n *\r\n * Layer and group properties can either be set by adding extra properties\r\n * to their options when they are created or via their set method.\r\n *\r\n * Specify a `title` for a Layer by adding a `title` property to it's options object:\r\n * ```javascript\r\n * var lyr = new ol.layer.Tile({\r\n *   // Specify a title property which will be displayed by the layer switcher\r\n *   title: 'OpenStreetMap',\r\n *   visible: true,\r\n *   source: new ol.source.OSM()\r\n * })\r\n * ```\r\n *\r\n * Alternatively the properties can be set via the `set` method after a layer has been created:\r\n * ```javascript\r\n * var lyr = new ol.layer.Tile({\r\n *   visible: true,\r\n *   source: new ol.source.OSM()\r\n * })\r\n * // Specify a title property which will be displayed by the layer switcher\r\n * lyr.set('title', 'OpenStreetMap');\r\n * ```\r\n *\r\n * To create a LayerSwitcher and add it to a map, create a new instance then pass it to the map's [`addControl` method](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html#addControl).\r\n * ```javascript\r\n * var layerSwitcher = new LayerSwitcher({\r\n *   reverse: true,\r\n *   groupSelectStyle: 'group'\r\n * });\r\n * map.addControl(layerSwitcher);\r\n * ```\r\n *\r\n * @constructor\r\n * @extends {ol/control/Control~Control}\r\n * @param opt_options LayerSwitcher options, see  [LayerSwitcher Options](#options) and [RenderOptions](#renderoptions) which LayerSwitcher `Options` extends for more details.\r\n */\r\nclass LayerSwitcher extends Control {\r\n    constructor(opt_options) {\r\n        const options = Object.assign({}, opt_options);\r\n        const element = document.createElement('div');\r\n        super({ element: element, target: options.target });\r\n        this.activationMode = options.activationMode || 'mouseover';\r\n        this.startActive = options.startActive === true;\r\n        // TODO Next: Rename to showButtonContent\r\n        this.label = options.label !== undefined ? options.label : '';\r\n        // TODO Next: Rename to hideButtonContent\r\n        this.collapseLabel =\r\n            options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\r\n        // TODO Next: Rename to showButtonTitle\r\n        this.tipLabel = options.tipLabel ? options.tipLabel : 'Legend';\r\n        // TODO Next: Rename to hideButtonTitle\r\n        this.collapseTipLabel = options.collapseTipLabel\r\n            ? options.collapseTipLabel\r\n            : 'Collapse legend';\r\n        this.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\r\n        this.reverse = options.reverse !== false;\r\n        this.mapListeners = [];\r\n        this.hiddenClassName = 'ol-unselectable ol-control layer-switcher';\r\n        if (LayerSwitcher.isTouchDevice_()) {\r\n            this.hiddenClassName += ' touch';\r\n        }\r\n        this.shownClassName = 'shown';\r\n        element.className = this.hiddenClassName;\r\n        this.button = document.createElement('button');\r\n        element.appendChild(this.button);\r\n        this.panel = document.createElement('div');\r\n        this.panel.className = 'panel';\r\n        element.appendChild(this.panel);\r\n        LayerSwitcher.enableTouchScroll_(this.panel);\r\n        element.classList.add(CSS_PREFIX + 'group-select-style-' + this.groupSelectStyle);\r\n        element.classList.add(CSS_PREFIX + 'activation-mode-' + this.activationMode);\r\n        if (this.activationMode === 'click') {\r\n            // TODO Next: Remove in favour of layer-switcher-activation-mode-click\r\n            element.classList.add('activationModeClick');\r\n            this.button.onclick = (e) => {\r\n                const evt = e || window.event;\r\n                if (this.element.classList.contains(this.shownClassName)) {\r\n                    this.hidePanel();\r\n                }\r\n                else {\r\n                    this.showPanel();\r\n                }\r\n                evt.preventDefault();\r\n            };\r\n        }\r\n        else {\r\n            this.button.onmouseover = () => {\r\n                this.showPanel();\r\n            };\r\n            this.button.onclick = (e) => {\r\n                const evt = e || window.event;\r\n                this.showPanel();\r\n                evt.preventDefault();\r\n            };\r\n            this.panel.onmouseout = (evt) => {\r\n                if (!this.panel.contains(evt.relatedTarget)) {\r\n                    this.hidePanel();\r\n                }\r\n            };\r\n        }\r\n        this.updateButton();\r\n    }\r\n    /**\r\n     * Set the map instance the control is associated with.\r\n     * @param map The map instance.\r\n     */\r\n    setMap(map) {\r\n        // Clean up listeners associated with the previous map\r\n        for (let i = 0; i < this.mapListeners.length; i++) {\r\n            ol_Observable.unByKey(this.mapListeners[i]);\r\n        }\r\n        this.mapListeners.length = 0;\r\n        // Wire up listeners etc. and store reference to new map\r\n        super.setMap(map);\r\n        if (map) {\r\n            if (this.startActive) {\r\n                this.showPanel();\r\n            }\r\n            else {\r\n                this.renderPanel();\r\n            }\r\n            if (this.activationMode !== 'click') {\r\n                this.mapListeners.push(map.on('pointerdown', () => {\r\n                    this.hidePanel();\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Show the layer panel. Fires `'show'` event.\r\n     * @fires LayerSwitcher#show\r\n     */\r\n    showPanel() {\r\n        if (!this.element.classList.contains(this.shownClassName)) {\r\n            this.element.classList.add(this.shownClassName);\r\n            this.updateButton();\r\n            this.renderPanel();\r\n        }\r\n        /**\r\n         * Event triggered after the panel has been shown.\r\n         * Listen to the event via the `on` or `once` methods; for example:\r\n         * ```js\r\n         * var layerSwitcher = new LayerSwitcher();\r\n         * map.addControl(layerSwitcher);\r\n         *\r\n         * layerSwitcher.on('show', evt => {\r\n         *   console.log('show', evt);\r\n         * });\r\n         * @event LayerSwitcher#show\r\n         */\r\n        this.dispatchEvent('show');\r\n    }\r\n    /**\r\n     * Hide the layer panel. Fires `'hide'` event.\r\n     * @fires LayerSwitcher#hide\r\n     */\r\n    hidePanel() {\r\n        if (this.element.classList.contains(this.shownClassName)) {\r\n            this.element.classList.remove(this.shownClassName);\r\n            this.updateButton();\r\n        }\r\n        /**\r\n         * Event triggered after the panel has been hidden.\r\n         * @event LayerSwitcher#hide\r\n         */\r\n        this.dispatchEvent('hide');\r\n    }\r\n    /**\r\n     * Update button text content and attributes based on current\r\n     * state\r\n     */\r\n    updateButton() {\r\n        if (this.element.classList.contains(this.shownClassName)) {\r\n            this.button.textContent = this.collapseLabel;\r\n            this.button.setAttribute('title', this.collapseTipLabel);\r\n            this.button.setAttribute('aria-label', this.collapseTipLabel);\r\n        }\r\n        else {\r\n            this.button.textContent = this.label;\r\n            this.button.setAttribute('title', this.tipLabel);\r\n            this.button.setAttribute('aria-label', this.tipLabel);\r\n        }\r\n    }\r\n    /**\r\n     * Re-draw the layer panel to represent the current state of the layers.\r\n     */\r\n    renderPanel() {\r\n        this.dispatchEvent('render');\r\n        LayerSwitcher.renderPanel(this.getMap(), this.panel, {\r\n            groupSelectStyle: this.groupSelectStyle,\r\n            reverse: this.reverse\r\n        });\r\n        this.dispatchEvent('rendercomplete');\r\n    }\r\n    /**\r\n     * **_[static]_** - Re-draw the layer panel to represent the current state of the layers.\r\n     * @param map The OpenLayers Map instance to render layers for\r\n     * @param panel The DOM Element into which the layer tree will be rendered\r\n     * @param options Options for panel, group, and layers\r\n     */\r\n    static renderPanel(map, panel, options) {\r\n        // Create the event.\r\n        const render_event = new Event('render');\r\n        // Dispatch the event.\r\n        panel.dispatchEvent(render_event);\r\n        options = options || {};\r\n        options.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\r\n        LayerSwitcher.ensureTopVisibleBaseLayerShown(map, options.groupSelectStyle);\r\n        while (panel.firstChild) {\r\n            panel.removeChild(panel.firstChild);\r\n        }\r\n        // Reset indeterminate state for all layers and groups before\r\n        // applying based on groupSelectStyle\r\n        LayerSwitcher.forEachRecursive(map, function (l, _idx, _a) {\r\n            l.set('indeterminate', false);\r\n        });\r\n        if (options.groupSelectStyle === 'children' ||\r\n            options.groupSelectStyle === 'none') {\r\n            // Set visibile and indeterminate state of groups based on\r\n            // their children's visibility\r\n            LayerSwitcher.setGroupVisibility(map);\r\n        }\r\n        else if (options.groupSelectStyle === 'group') {\r\n            // Set child indetermiate state based on their parent's visibility\r\n            LayerSwitcher.setChildVisibility(map);\r\n        }\r\n        const ul = document.createElement('ul');\r\n        panel.appendChild(ul);\r\n        // passing two map arguments instead of lyr as we're passing the map as the root of the layers tree\r\n        LayerSwitcher.renderLayers_(map, map, ul, options, function render(_changedLyr) {\r\n            LayerSwitcher.renderPanel(map, panel, options);\r\n        });\r\n        // Create the event.\r\n        const rendercomplete_event = new Event('rendercomplete');\r\n        // Dispatch the event.\r\n        panel.dispatchEvent(rendercomplete_event);\r\n    }\r\n    /**\r\n     * **_[static]_** - Determine if a given layer group contains base layers\r\n     * @param grp Group to test\r\n     */\r\n    static isBaseGroup(grp) {\r\n        if (grp instanceof LayerGroup) {\r\n            const lyrs = grp.getLayers().getArray();\r\n            return lyrs.length && lyrs[0].get('type') === 'base';\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    static setGroupVisibility(map) {\r\n        // Get a list of groups, with the deepest first\r\n        const groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\r\n            return (l instanceof LayerGroup &&\r\n                !l.get('combine') &&\r\n                !LayerSwitcher.isBaseGroup(l));\r\n        }).reverse();\r\n        // console.log(groups.map(g => g.get('title')));\r\n        groups.forEach(function (grp) {\r\n            // TODO Can we use getLayersArray, is it public in the esm build?\r\n            const descendantVisibility = grp.getLayersArray().map(function (l) {\r\n                const state = l.getVisible();\r\n                // console.log('>', l.get('title'), state);\r\n                return state;\r\n            });\r\n            // console.log(descendantVisibility);\r\n            if (descendantVisibility.every(function (v) {\r\n                return v === true;\r\n            })) {\r\n                grp.setVisible(true);\r\n                grp.set('indeterminate', false);\r\n            }\r\n            else if (descendantVisibility.every(function (v) {\r\n                return v === false;\r\n            })) {\r\n                grp.setVisible(false);\r\n                grp.set('indeterminate', false);\r\n            }\r\n            else {\r\n                grp.setVisible(true);\r\n                grp.set('indeterminate', true);\r\n            }\r\n        });\r\n    }\r\n    static setChildVisibility(map) {\r\n        // console.log('setChildVisibility');\r\n        const groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\r\n            return (l instanceof LayerGroup &&\r\n                !l.get('combine') &&\r\n                !LayerSwitcher.isBaseGroup(l));\r\n        });\r\n        groups.forEach(function (grp) {\r\n            const group = grp;\r\n            // console.log(group.get('title'));\r\n            const groupVisible = group.getVisible();\r\n            const groupIndeterminate = group.get('indeterminate');\r\n            group\r\n                .getLayers()\r\n                .getArray()\r\n                .forEach(function (l) {\r\n                l.set('indeterminate', false);\r\n                if ((!groupVisible || groupIndeterminate) && l.getVisible()) {\r\n                    l.set('indeterminate', true);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Ensure only the top-most base layer is visible if more than one is visible.\r\n     * @param map The map instance.\r\n     * @param groupSelectStyle\r\n     * @protected\r\n     */\r\n    static ensureTopVisibleBaseLayerShown(map, groupSelectStyle) {\r\n        let lastVisibleBaseLyr;\r\n        LayerSwitcher.forEachRecursive(map, function (lyr, _idx, _arr) {\r\n            if (lyr.get('type') === 'base' && lyr.getVisible()) {\r\n                lastVisibleBaseLyr = lyr;\r\n            }\r\n        });\r\n        if (lastVisibleBaseLyr)\r\n            LayerSwitcher.setVisible_(map, lastVisibleBaseLyr, true, groupSelectStyle);\r\n    }\r\n    /**\r\n     * **_[static]_** - Get an Array of all layers and groups displayed by the LayerSwitcher (has a `'title'` property)\r\n     * contained by the specified map or layer group; optionally filtering via `filterFn`\r\n     * @param grp The map or layer group for which layers are found.\r\n     * @param filterFn Optional function used to filter the returned layers\r\n     */\r\n    static getGroupsAndLayers(grp, filterFn) {\r\n        const layers = [];\r\n        filterFn =\r\n            filterFn ||\r\n                function (_lyr, _idx, _arr) {\r\n                    return true;\r\n                };\r\n        LayerSwitcher.forEachRecursive(grp, function (lyr, idx, arr) {\r\n            if (lyr.get('title')) {\r\n                if (filterFn(lyr, idx, arr)) {\r\n                    layers.push(lyr);\r\n                }\r\n            }\r\n        });\r\n        return layers;\r\n    }\r\n    /**\r\n     * Toggle the visible state of a layer.\r\n     * Takes care of hiding other layers in the same exclusive group if the layer\r\n     * is toggle to visible.\r\n     * @protected\r\n     * @param map The map instance.\r\n     * @param lyr layer whose visibility will be toggled.\r\n     * @param visible Set whether the layer is shown\r\n     * @param groupSelectStyle\r\n     * @protected\r\n     */\r\n    static setVisible_(map, lyr, visible, groupSelectStyle) {\r\n        // console.log(lyr.get('title'), visible, groupSelectStyle);\r\n        lyr.setVisible(visible);\r\n        if (visible && lyr.get('type') === 'base') {\r\n            // Hide all other base layers regardless of grouping\r\n            LayerSwitcher.forEachRecursive(map, function (l, _idx, _arr) {\r\n                if (l != lyr && l.get('type') === 'base') {\r\n                    l.setVisible(false);\r\n                }\r\n            });\r\n        }\r\n        if (lyr instanceof LayerGroup &&\r\n            !lyr.get('combine') &&\r\n            groupSelectStyle === 'children') {\r\n            lyr.getLayers().forEach((l) => {\r\n                LayerSwitcher.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Render all layers that are children of a group.\r\n     * @param map The map instance.\r\n     * @param lyr Layer to be rendered (should have a title property).\r\n     * @param idx Position in parent group list.\r\n     * @param options Options for groups and layers\r\n     * @protected\r\n     */\r\n    static renderLayer_(map, lyr, idx, options, render) {\r\n        const li = document.createElement('li');\r\n        const lyrTitle = lyr.get('title');\r\n        const checkboxId = LayerSwitcher.uuid();\r\n        const label = document.createElement('label');\r\n        if (lyr instanceof LayerGroup && !lyr.get('combine')) {\r\n            const isBaseGroup = LayerSwitcher.isBaseGroup(lyr);\r\n            li.classList.add('group');\r\n            if (isBaseGroup) {\r\n                li.classList.add(CSS_PREFIX + 'base-group');\r\n            }\r\n            // Group folding\r\n            if (lyr.get('fold')) {\r\n                li.classList.add(CSS_PREFIX + 'fold');\r\n                li.classList.add(CSS_PREFIX + lyr.get('fold'));\r\n                const btn = document.createElement('button');\r\n                btn.onclick = function (e) {\r\n                    const evt = e || window.event;\r\n                    LayerSwitcher.toggleFold_(lyr, li);\r\n                    evt.preventDefault();\r\n                };\r\n                li.appendChild(btn);\r\n            }\r\n            if (!isBaseGroup && options.groupSelectStyle != 'none') {\r\n                const input = document.createElement('input');\r\n                input.type = 'checkbox';\r\n                input.id = checkboxId;\r\n                input.checked = lyr.getVisible();\r\n                input.indeterminate = lyr.get('indeterminate');\r\n                input.onchange = function (e) {\r\n                    const target = e.target;\r\n                    LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\r\n                    render(lyr);\r\n                };\r\n                li.appendChild(input);\r\n                label.htmlFor = checkboxId;\r\n            }\r\n            label.innerHTML = lyrTitle;\r\n            li.appendChild(label);\r\n            const ul = document.createElement('ul');\r\n            li.appendChild(ul);\r\n            LayerSwitcher.renderLayers_(map, lyr, ul, options, render);\r\n        }\r\n        else {\r\n            li.className = 'layer';\r\n            const input = document.createElement('input');\r\n            if (lyr.get('type') === 'base') {\r\n                input.type = 'radio';\r\n            }\r\n            else {\r\n                input.type = 'checkbox';\r\n            }\r\n            input.id = checkboxId;\r\n            input.checked = lyr.get('visible');\r\n            input.indeterminate = lyr.get('indeterminate');\r\n            input.onchange = function (e) {\r\n                const target = e.target;\r\n                LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\r\n                render(lyr);\r\n            };\r\n            li.appendChild(input);\r\n            label.htmlFor = checkboxId;\r\n            label.innerHTML = lyrTitle;\r\n            const rsl = map.getView().getResolution();\r\n            if (rsl >= lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {\r\n                label.className += ' disabled';\r\n            }\r\n            else if (lyr.getMinZoom && lyr.getMaxZoom) {\r\n                const zoom = map.getView().getZoom();\r\n                if (zoom <= lyr.getMinZoom() || zoom > lyr.getMaxZoom()) {\r\n                    label.className += ' disabled';\r\n                }\r\n            }\r\n            li.appendChild(label);\r\n        }\r\n        return li;\r\n    }\r\n    /**\r\n     * Render all layers that are children of a group.\r\n     * @param map The map instance.\r\n     * @param lyr Group layer whose children will be rendered.\r\n     * @param elm DOM element that children will be appended to.\r\n     * @param options Options for groups and layers\r\n     * @protected\r\n     */\r\n    static renderLayers_(map, lyr, elm, options, render) {\r\n        let lyrs = lyr.getLayers().getArray().slice();\r\n        if (options.reverse)\r\n            lyrs = lyrs.reverse();\r\n        for (let i = 0, l; i < lyrs.length; i++) {\r\n            l = lyrs[i];\r\n            if (l.get('title')) {\r\n                elm.appendChild(LayerSwitcher.renderLayer_(map, l, i, options, render));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * **_[static]_** - Call the supplied function for each layer in the passed layer group\r\n     * recursing nested groups.\r\n     * @param lyr The layer group to start iterating from.\r\n     * @param fn Callback which will be called for each layer\r\n     * found under `lyr`.\r\n     */\r\n    static forEachRecursive(lyr, fn) {\r\n        lyr.getLayers().forEach(function (lyr, idx, a) {\r\n            fn(lyr, idx, a);\r\n            if (lyr instanceof LayerGroup) {\r\n                LayerSwitcher.forEachRecursive(lyr, fn);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * **_[static]_** - Generate a UUID\r\n     * Adapted from http://stackoverflow.com/a/2117523/526860\r\n     * @returns {String} UUID\r\n     */\r\n    static uuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n            return v.toString(16);\r\n        });\r\n    }\r\n    /**\r\n     * Apply workaround to enable scrolling of overflowing content within an\r\n     * element. Adapted from https://gist.github.com/chrismbarr/4107472\r\n     * @param elm Element on which to enable touch scrolling\r\n     * @protected\r\n     */\r\n    static enableTouchScroll_(elm) {\r\n        if (LayerSwitcher.isTouchDevice_()) {\r\n            let scrollStartPos = 0;\r\n            elm.addEventListener('touchstart', function (event) {\r\n                scrollStartPos = this.scrollTop + event.touches[0].pageY;\r\n            }, false);\r\n            elm.addEventListener('touchmove', function (event) {\r\n                this.scrollTop = scrollStartPos - event.touches[0].pageY;\r\n            }, false);\r\n        }\r\n    }\r\n    /**\r\n     * Determine if the current browser supports touch events. Adapted from\r\n     * https://gist.github.com/chrismbarr/4107472\r\n     * @returns {Boolean} True if client can have 'TouchEvent' event\r\n     * @protected\r\n     */\r\n    static isTouchDevice_() {\r\n        try {\r\n            document.createEvent('TouchEvent');\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Fold/unfold layer group\r\n     * @param lyr Layer group to fold/unfold\r\n     * @param li List item containing layer group\r\n     * @protected\r\n     */\r\n    static toggleFold_(lyr, li) {\r\n        li.classList.remove(CSS_PREFIX + lyr.get('fold'));\r\n        lyr.set('fold', lyr.get('fold') === 'open' ? 'close' : 'open');\r\n        li.classList.add(CSS_PREFIX + lyr.get('fold'));\r\n    }\r\n    /**\r\n     * If a valid groupSelectStyle value is not provided then return the default\r\n     * @param groupSelectStyle The string to check for validity\r\n     * @returns The value groupSelectStyle, if valid, the default otherwise\r\n     * @protected\r\n     */\r\n    static getGroupSelectStyle(groupSelectStyle) {\r\n        return ['none', 'children', 'group'].indexOf(groupSelectStyle) >= 0\r\n            ? groupSelectStyle\r\n            : 'children';\r\n    }\r\n}\r\n// Expose LayerSwitcher as ol.control.LayerSwitcher if using a full build of\r\n// OpenLayers\r\nif (window['ol'] && window['ol']['control']) {\r\n    window['ol']['control']['LayerSwitcher'] = LayerSwitcher;\r\n}\r\n\r\nreturn LayerSwitcher;\r\n\r\n})));\r\n", "export default require(\"./node_modules/ol-layerswitcher/dist/ol-layerswitcher.js\");"],
  "mappings": "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",
  "names": ["lyr"]
}
