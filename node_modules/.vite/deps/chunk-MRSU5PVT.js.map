{
  "version": 3,
  "sources": ["../../ol/CollectionEventType.js", "../../ol/Collection.js"],
  "sourcesContent": ["/**\n * @module ol/CollectionEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when an item is added to the collection.\n   * @event module:ol/Collection.CollectionEvent#add\n   * @api\n   */\n  ADD: 'add',\n  /**\n   * Triggered when an item is removed from the collection.\n   * @event module:ol/Collection.CollectionEvent#remove\n   * @api\n   */\n  REMOVE: 'remove',\n};\n", "/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  constructor(type, element, index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n    this.element = element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = index;\n  }\n}\n\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  constructor(array, options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = array ? array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (index < 0 || index > this.getLength()) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\n    );\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    if (index < 0 || index >= this.getLength()) {\n      return undefined;\n    }\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index >= n) {\n      this.insertAt(index, elem);\n      return;\n    }\n    if (index < 0) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem, index);\n    }\n    const prev = this.array_[index];\n    this.array_[index] = elem;\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\n      )\n    );\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */\n  assertUnique_(elem, except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n}\n\nexport default Collection;\n"],
  "mappings": "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",
  "names": []
}
