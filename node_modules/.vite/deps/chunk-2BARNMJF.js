import {
  jsonp
} from "./chunk-5EUO6N7U.js";
import {
  TileImage_default,
  createFromTileUrlFunctions
} from "./chunk-TAAP3NXR.js";
import {
  createXYZ,
  extentFromProjection
} from "./chunk-E6VT3FQR.js";
import {
  createOrUpdate
} from "./chunk-7TXKVOMD.js";
import {
  get2 as get,
  getTransformFromProjections
} from "./chunk-YLYKO5JM.js";
import {
  applyTransform,
  init_extent,
  intersects
} from "./chunk-3PBYOB6B.js";

// node_modules/ol/source/BingMaps.js
init_extent();
function quadKey(tileCoord) {
  const z = tileCoord[0];
  const digits = new Array(z);
  let mask = 1 << z - 1;
  let i, charCode;
  for (i = 0; i < z; ++i) {
    charCode = 48;
    if (tileCoord[1] & mask) {
      charCode += 1;
    }
    if (tileCoord[2] & mask) {
      charCode += 2;
    }
    digits[i] = String.fromCharCode(charCode);
    mask >>= 1;
  }
  return digits.join("");
}
var TOS_ATTRIBUTION = '<a class="ol-attribution-bing-tos" href="https://www.microsoft.com/maps/product/terms.html" target="_blank">Terms of Use</a>';
var BingMaps = class extends TileImage_default {
  constructor(options) {
    const hidpi = options.hidpi !== void 0 ? options.hidpi : false;
    super({
      cacheSize: options.cacheSize,
      crossOrigin: "anonymous",
      interpolate: options.interpolate,
      opaque: true,
      projection: get("EPSG:3857"),
      reprojectionErrorThreshold: options.reprojectionErrorThreshold,
      state: "loading",
      tileLoadFunction: options.tileLoadFunction,
      tilePixelRatio: hidpi ? 2 : 1,
      wrapX: options.wrapX !== void 0 ? options.wrapX : true,
      transition: options.transition,
      zDirection: options.zDirection
    });
    this.hidpi_ = hidpi;
    this.culture_ = options.culture !== void 0 ? options.culture : "en-us";
    this.maxZoom_ = options.maxZoom !== void 0 ? options.maxZoom : -1;
    this.apiKey_ = options.key;
    this.imagerySet_ = options.imagerySet;
    const url = "https://dev.virtualearth.net/REST/v1/Imagery/Metadata/" + this.imagerySet_ + "?uriScheme=https&include=ImageryProviders&key=" + this.apiKey_ + "&c=" + this.culture_;
    jsonp(
      url,
      this.handleImageryMetadataResponse.bind(this),
      void 0,
      "jsonp"
    );
  }
  getApiKey() {
    return this.apiKey_;
  }
  getImagerySet() {
    return this.imagerySet_;
  }
  handleImageryMetadataResponse(response) {
    if (response.statusCode != 200 || response.statusDescription != "OK" || response.authenticationResultCode != "ValidCredentials" || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {
      this.setState("error");
      return;
    }
    const resource = response.resourceSets[0].resources[0];
    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;
    const sourceProjection = this.getProjection();
    const extent = extentFromProjection(sourceProjection);
    const scale = this.hidpi_ ? 2 : 1;
    const tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];
    const tileGrid = createXYZ({
      extent,
      minZoom: resource.zoomMin,
      maxZoom,
      tileSize
    });
    this.tileGrid = tileGrid;
    const culture = this.culture_;
    const hidpi = this.hidpi_;
    this.tileUrlFunction = createFromTileUrlFunctions(
      resource.imageUrlSubdomains.map(function(subdomain) {
        const quadKeyTileCoord = [0, 0, 0];
        const imageUrl = resource.imageUrl.replace("{subdomain}", subdomain).replace("{culture}", culture);
        return function(tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
            return void 0;
          } else {
            createOrUpdate(
              tileCoord[0],
              tileCoord[1],
              tileCoord[2],
              quadKeyTileCoord
            );
            let url = imageUrl;
            if (hidpi) {
              url += "&dpi=d1&device=mobile";
            }
            return url.replace("{quadkey}", quadKey(quadKeyTileCoord));
          }
        };
      })
    );
    if (resource.imageryProviders) {
      const transform = getTransformFromProjections(
        get("EPSG:4326"),
        this.getProjection()
      );
      this.setAttributions(
        function(frameState) {
          const attributions = [];
          const viewState = frameState.viewState;
          const tileGrid2 = this.getTileGrid();
          const z = tileGrid2.getZForResolution(
            viewState.resolution,
            this.zDirection
          );
          const tileCoord = tileGrid2.getTileCoordForCoordAndZ(
            viewState.center,
            z
          );
          const zoom = tileCoord[0];
          resource.imageryProviders.map(function(imageryProvider) {
            let intersecting = false;
            const coverageAreas = imageryProvider.coverageAreas;
            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {
              const coverageArea = coverageAreas[i];
              if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {
                const bbox = coverageArea.bbox;
                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];
                const extent2 = applyTransform(epsg4326Extent, transform);
                if (intersects(extent2, frameState.extent)) {
                  intersecting = true;
                  break;
                }
              }
            }
            if (intersecting) {
              attributions.push(imageryProvider.attribution);
            }
          });
          attributions.push(TOS_ATTRIBUTION);
          return attributions;
        }.bind(this)
      );
    }
    this.setState("ready");
  }
};
var BingMaps_default = BingMaps;

export {
  quadKey,
  BingMaps_default
};
//# sourceMappingURL=chunk-2BARNMJF.js.map
