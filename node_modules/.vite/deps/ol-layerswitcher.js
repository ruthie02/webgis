import {
  Group_exports,
  init_Group
} from "./chunk-VAW6KAOB.js";
import "./chunk-MRSU5PVT.js";
import {
  Control_exports,
  init_Control
} from "./chunk-AL6P6YQ7.js";
import "./chunk-FMZQKVPH.js";
import "./chunk-CIE5J4TM.js";
import "./chunk-SREQ7PPT.js";
import "./chunk-T7L33343.js";
import "./chunk-LY63RGQB.js";
import {
  Observable_exports,
  init_Observable
} from "./chunk-PJ4BXDWN.js";
import "./chunk-K4BY6QEO.js";
import "./chunk-IYA4BFU2.js";
import "./chunk-NYBLFW4I.js";
import "./chunk-3PBYOB6B.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-J43GMYXM.js";

// node_modules/ol-layerswitcher/dist/ol-layerswitcher.js
var require_ol_layerswitcher = __commonJS({
  "node_modules/ol-layerswitcher/dist/ol-layerswitcher.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory((init_Control(), __toCommonJS(Control_exports)), (init_Observable(), __toCommonJS(Observable_exports)), (init_Group(), __toCommonJS(Group_exports))) : typeof define === "function" && define.amd ? define(["ol/control/Control", "ol/Observable", "ol/layer/Group"], factory) : global.LayerSwitcher = factory(global.ol.control.Control, global.ol.Observable, global.ol.layer.Group);
    })(exports, function(Control, ol_Observable, LayerGroup) {
      "use strict";
      Control = "default" in Control ? Control["default"] : Control;
      LayerGroup = "default" in LayerGroup ? LayerGroup["default"] : LayerGroup;
      const CSS_PREFIX = "layer-switcher-";
      class LayerSwitcher extends Control {
        constructor(opt_options) {
          const options = Object.assign({}, opt_options);
          const element = document.createElement("div");
          super({ element, target: options.target });
          this.activationMode = options.activationMode || "mouseover";
          this.startActive = options.startActive === true;
          this.label = options.label !== void 0 ? options.label : "";
          this.collapseLabel = options.collapseLabel !== void 0 ? options.collapseLabel : "\xBB";
          this.tipLabel = options.tipLabel ? options.tipLabel : "Legend";
          this.collapseTipLabel = options.collapseTipLabel ? options.collapseTipLabel : "Collapse legend";
          this.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);
          this.reverse = options.reverse !== false;
          this.mapListeners = [];
          this.hiddenClassName = "ol-unselectable ol-control layer-switcher";
          if (LayerSwitcher.isTouchDevice_()) {
            this.hiddenClassName += " touch";
          }
          this.shownClassName = "shown";
          element.className = this.hiddenClassName;
          this.button = document.createElement("button");
          element.appendChild(this.button);
          this.panel = document.createElement("div");
          this.panel.className = "panel";
          element.appendChild(this.panel);
          LayerSwitcher.enableTouchScroll_(this.panel);
          element.classList.add(CSS_PREFIX + "group-select-style-" + this.groupSelectStyle);
          element.classList.add(CSS_PREFIX + "activation-mode-" + this.activationMode);
          if (this.activationMode === "click") {
            element.classList.add("activationModeClick");
            this.button.onclick = (e) => {
              const evt = e || window.event;
              if (this.element.classList.contains(this.shownClassName)) {
                this.hidePanel();
              } else {
                this.showPanel();
              }
              evt.preventDefault();
            };
          } else {
            this.button.onmouseover = () => {
              this.showPanel();
            };
            this.button.onclick = (e) => {
              const evt = e || window.event;
              this.showPanel();
              evt.preventDefault();
            };
            this.panel.onmouseout = (evt) => {
              if (!this.panel.contains(evt.relatedTarget)) {
                this.hidePanel();
              }
            };
          }
          this.updateButton();
        }
        setMap(map) {
          for (let i = 0; i < this.mapListeners.length; i++) {
            ol_Observable.unByKey(this.mapListeners[i]);
          }
          this.mapListeners.length = 0;
          super.setMap(map);
          if (map) {
            if (this.startActive) {
              this.showPanel();
            } else {
              this.renderPanel();
            }
            if (this.activationMode !== "click") {
              this.mapListeners.push(map.on("pointerdown", () => {
                this.hidePanel();
              }));
            }
          }
        }
        showPanel() {
          if (!this.element.classList.contains(this.shownClassName)) {
            this.element.classList.add(this.shownClassName);
            this.updateButton();
            this.renderPanel();
          }
          this.dispatchEvent("show");
        }
        hidePanel() {
          if (this.element.classList.contains(this.shownClassName)) {
            this.element.classList.remove(this.shownClassName);
            this.updateButton();
          }
          this.dispatchEvent("hide");
        }
        updateButton() {
          if (this.element.classList.contains(this.shownClassName)) {
            this.button.textContent = this.collapseLabel;
            this.button.setAttribute("title", this.collapseTipLabel);
            this.button.setAttribute("aria-label", this.collapseTipLabel);
          } else {
            this.button.textContent = this.label;
            this.button.setAttribute("title", this.tipLabel);
            this.button.setAttribute("aria-label", this.tipLabel);
          }
        }
        renderPanel() {
          this.dispatchEvent("render");
          LayerSwitcher.renderPanel(this.getMap(), this.panel, {
            groupSelectStyle: this.groupSelectStyle,
            reverse: this.reverse
          });
          this.dispatchEvent("rendercomplete");
        }
        static renderPanel(map, panel, options) {
          const render_event = new Event("render");
          panel.dispatchEvent(render_event);
          options = options || {};
          options.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);
          LayerSwitcher.ensureTopVisibleBaseLayerShown(map, options.groupSelectStyle);
          while (panel.firstChild) {
            panel.removeChild(panel.firstChild);
          }
          LayerSwitcher.forEachRecursive(map, function(l, _idx, _a) {
            l.set("indeterminate", false);
          });
          if (options.groupSelectStyle === "children" || options.groupSelectStyle === "none") {
            LayerSwitcher.setGroupVisibility(map);
          } else if (options.groupSelectStyle === "group") {
            LayerSwitcher.setChildVisibility(map);
          }
          const ul = document.createElement("ul");
          panel.appendChild(ul);
          LayerSwitcher.renderLayers_(map, map, ul, options, function render(_changedLyr) {
            LayerSwitcher.renderPanel(map, panel, options);
          });
          const rendercomplete_event = new Event("rendercomplete");
          panel.dispatchEvent(rendercomplete_event);
        }
        static isBaseGroup(grp) {
          if (grp instanceof LayerGroup) {
            const lyrs = grp.getLayers().getArray();
            return lyrs.length && lyrs[0].get("type") === "base";
          } else {
            return false;
          }
        }
        static setGroupVisibility(map) {
          const groups = LayerSwitcher.getGroupsAndLayers(map, function(l) {
            return l instanceof LayerGroup && !l.get("combine") && !LayerSwitcher.isBaseGroup(l);
          }).reverse();
          groups.forEach(function(grp) {
            const descendantVisibility = grp.getLayersArray().map(function(l) {
              const state = l.getVisible();
              return state;
            });
            if (descendantVisibility.every(function(v) {
              return v === true;
            })) {
              grp.setVisible(true);
              grp.set("indeterminate", false);
            } else if (descendantVisibility.every(function(v) {
              return v === false;
            })) {
              grp.setVisible(false);
              grp.set("indeterminate", false);
            } else {
              grp.setVisible(true);
              grp.set("indeterminate", true);
            }
          });
        }
        static setChildVisibility(map) {
          const groups = LayerSwitcher.getGroupsAndLayers(map, function(l) {
            return l instanceof LayerGroup && !l.get("combine") && !LayerSwitcher.isBaseGroup(l);
          });
          groups.forEach(function(grp) {
            const group = grp;
            const groupVisible = group.getVisible();
            const groupIndeterminate = group.get("indeterminate");
            group.getLayers().getArray().forEach(function(l) {
              l.set("indeterminate", false);
              if ((!groupVisible || groupIndeterminate) && l.getVisible()) {
                l.set("indeterminate", true);
              }
            });
          });
        }
        static ensureTopVisibleBaseLayerShown(map, groupSelectStyle) {
          let lastVisibleBaseLyr;
          LayerSwitcher.forEachRecursive(map, function(lyr, _idx, _arr) {
            if (lyr.get("type") === "base" && lyr.getVisible()) {
              lastVisibleBaseLyr = lyr;
            }
          });
          if (lastVisibleBaseLyr)
            LayerSwitcher.setVisible_(map, lastVisibleBaseLyr, true, groupSelectStyle);
        }
        static getGroupsAndLayers(grp, filterFn) {
          const layers = [];
          filterFn = filterFn || function(_lyr, _idx, _arr) {
            return true;
          };
          LayerSwitcher.forEachRecursive(grp, function(lyr, idx, arr) {
            if (lyr.get("title")) {
              if (filterFn(lyr, idx, arr)) {
                layers.push(lyr);
              }
            }
          });
          return layers;
        }
        static setVisible_(map, lyr, visible, groupSelectStyle) {
          lyr.setVisible(visible);
          if (visible && lyr.get("type") === "base") {
            LayerSwitcher.forEachRecursive(map, function(l, _idx, _arr) {
              if (l != lyr && l.get("type") === "base") {
                l.setVisible(false);
              }
            });
          }
          if (lyr instanceof LayerGroup && !lyr.get("combine") && groupSelectStyle === "children") {
            lyr.getLayers().forEach((l) => {
              LayerSwitcher.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);
            });
          }
        }
        static renderLayer_(map, lyr, idx, options, render) {
          const li = document.createElement("li");
          const lyrTitle = lyr.get("title");
          const checkboxId = LayerSwitcher.uuid();
          const label = document.createElement("label");
          if (lyr instanceof LayerGroup && !lyr.get("combine")) {
            const isBaseGroup = LayerSwitcher.isBaseGroup(lyr);
            li.classList.add("group");
            if (isBaseGroup) {
              li.classList.add(CSS_PREFIX + "base-group");
            }
            if (lyr.get("fold")) {
              li.classList.add(CSS_PREFIX + "fold");
              li.classList.add(CSS_PREFIX + lyr.get("fold"));
              const btn = document.createElement("button");
              btn.onclick = function(e) {
                const evt = e || window.event;
                LayerSwitcher.toggleFold_(lyr, li);
                evt.preventDefault();
              };
              li.appendChild(btn);
            }
            if (!isBaseGroup && options.groupSelectStyle != "none") {
              const input = document.createElement("input");
              input.type = "checkbox";
              input.id = checkboxId;
              input.checked = lyr.getVisible();
              input.indeterminate = lyr.get("indeterminate");
              input.onchange = function(e) {
                const target = e.target;
                LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);
                render(lyr);
              };
              li.appendChild(input);
              label.htmlFor = checkboxId;
            }
            label.innerHTML = lyrTitle;
            li.appendChild(label);
            const ul = document.createElement("ul");
            li.appendChild(ul);
            LayerSwitcher.renderLayers_(map, lyr, ul, options, render);
          } else {
            li.className = "layer";
            const input = document.createElement("input");
            if (lyr.get("type") === "base") {
              input.type = "radio";
            } else {
              input.type = "checkbox";
            }
            input.id = checkboxId;
            input.checked = lyr.get("visible");
            input.indeterminate = lyr.get("indeterminate");
            input.onchange = function(e) {
              const target = e.target;
              LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);
              render(lyr);
            };
            li.appendChild(input);
            label.htmlFor = checkboxId;
            label.innerHTML = lyrTitle;
            const rsl = map.getView().getResolution();
            if (rsl >= lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {
              label.className += " disabled";
            } else if (lyr.getMinZoom && lyr.getMaxZoom) {
              const zoom = map.getView().getZoom();
              if (zoom <= lyr.getMinZoom() || zoom > lyr.getMaxZoom()) {
                label.className += " disabled";
              }
            }
            li.appendChild(label);
          }
          return li;
        }
        static renderLayers_(map, lyr, elm, options, render) {
          let lyrs = lyr.getLayers().getArray().slice();
          if (options.reverse)
            lyrs = lyrs.reverse();
          for (let i = 0, l; i < lyrs.length; i++) {
            l = lyrs[i];
            if (l.get("title")) {
              elm.appendChild(LayerSwitcher.renderLayer_(map, l, i, options, render));
            }
          }
        }
        static forEachRecursive(lyr, fn) {
          lyr.getLayers().forEach(function(lyr2, idx, a) {
            fn(lyr2, idx, a);
            if (lyr2 instanceof LayerGroup) {
              LayerSwitcher.forEachRecursive(lyr2, fn);
            }
          });
        }
        static uuid() {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
            return v.toString(16);
          });
        }
        static enableTouchScroll_(elm) {
          if (LayerSwitcher.isTouchDevice_()) {
            let scrollStartPos = 0;
            elm.addEventListener("touchstart", function(event) {
              scrollStartPos = this.scrollTop + event.touches[0].pageY;
            }, false);
            elm.addEventListener("touchmove", function(event) {
              this.scrollTop = scrollStartPos - event.touches[0].pageY;
            }, false);
          }
        }
        static isTouchDevice_() {
          try {
            document.createEvent("TouchEvent");
            return true;
          } catch (e) {
            return false;
          }
        }
        static toggleFold_(lyr, li) {
          li.classList.remove(CSS_PREFIX + lyr.get("fold"));
          lyr.set("fold", lyr.get("fold") === "open" ? "close" : "open");
          li.classList.add(CSS_PREFIX + lyr.get("fold"));
        }
        static getGroupSelectStyle(groupSelectStyle) {
          return ["none", "children", "group"].indexOf(groupSelectStyle) >= 0 ? groupSelectStyle : "children";
        }
      }
      if (window["ol"] && window["ol"]["control"]) {
        window["ol"]["control"]["LayerSwitcher"] = LayerSwitcher;
      }
      return LayerSwitcher;
    });
  }
});

// dep:ol-layerswitcher
var ol_layerswitcher_default = require_ol_layerswitcher();
export {
  ol_layerswitcher_default as default
};
//# sourceMappingURL=ol-layerswitcher.js.map
